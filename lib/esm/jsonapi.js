import{isResourceId as i}from"./common";import c from"./debug";const a=c(),p=r=>{let s;r.links&&delete r.links;const e=r.data,n=r.included;return Array.isArray(e)?s=e.map(t=>d(t,n)):s=d(e,n),s},l=(r,s=[])=>s.find(e=>r.id===e.id&&r.type===e.type)||r,d=(r,s)=>{a("denormalize resource: %O, %o",r,s||{});const e=Object.assign({id:r.id,type:r.type},r.attributes);return r.relationships&&Object.keys(r.relationships).forEach(n=>{const t=r.relationships[n].data;t?Array.isArray(t)?e[n]=t.map(o=>d(l(o,s),s)):e[n]=d(l(t,s),s):t===null&&(e[n]=null)}),a("denormalized resource: %O",e),e},u=r=>{a("normalize resource: %O",r);const s={},e={};for(const t in r){if(["type","id"].includes(t))continue;const o=r[t];o&&(i(o)||Array.isArray(o)&&i(o[0]))?e[t]={data:o}:s[t]=o}const n={type:r.type,attributes:s,relationships:e};return i(r)&&(n.id=r.id),a("normalized resource: %O",n),n};export{p as denormalize,u as normalize};