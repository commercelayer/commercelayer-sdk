import * as api from './api';
import { ApiError } from './error';
import type { ErrorInterceptor, InterceptorType, RawResponseReader, RequestInterceptor, ResponseInterceptor } from './interceptor';
import { ResourcesConfig, ResourcesInitConfig } from './resource';
declare type SdkConfig = {};
declare type CommerceLayerInitConfig = SdkConfig & ResourcesInitConfig;
declare type CommerceLayerConfig = SdkConfig & ResourcesConfig;
declare class CommerceLayerClient {
    #private;
    static get openApiSchemaVersion(): string;
    addresses: api.Addresses;
    adjustments: api.Adjustments;
    adyen_gateways: api.AdyenGateways;
    adyen_payments: api.AdyenPayments;
    application: api.Applications;
    attachments: api.Attachments;
    authorizations: api.Authorizations;
    avalara_accounts: api.AvalaraAccounts;
    billing_info_validation_rules: api.BillingInfoValidationRules;
    bing_geocoders: api.BingGeocoders;
    braintree_gateways: api.BraintreeGateways;
    braintree_payments: api.BraintreePayments;
    bundles: api.Bundles;
    captures: api.Captures;
    carrier_accounts: api.CarrierAccounts;
    checkout_com_gateways: api.CheckoutComGateways;
    checkout_com_payments: api.CheckoutComPayments;
    coupon_codes_promotion_rules: api.CouponCodesPromotionRules;
    coupon_recipients: api.CouponRecipients;
    coupons: api.Coupons;
    customer_addresses: api.CustomerAddresses;
    customer_groups: api.CustomerGroups;
    customer_password_resets: api.CustomerPasswordResets;
    customer_payment_sources: api.CustomerPaymentSources;
    customer_subscriptions: api.CustomerSubscriptions;
    customers: api.Customers;
    delivery_lead_times: api.DeliveryLeadTimes;
    event_callbacks: api.EventCallbacks;
    external_gateways: api.ExternalGateways;
    external_payments: api.ExternalPayments;
    external_promotions: api.ExternalPromotions;
    external_tax_calculators: api.ExternalTaxCalculators;
    fixed_amount_promotions: api.FixedAmountPromotions;
    fixed_price_promotions: api.FixedPricePromotions;
    free_gift_promotions: api.FreeGiftPromotions;
    free_shipping_promotions: api.FreeShippingPromotions;
    geocoders: api.Geocoders;
    gift_card_recipients: api.GiftCardRecipients;
    gift_cards: api.GiftCards;
    google_geocoders: api.GoogleGeocoders;
    imports: api.Imports;
    in_stock_subscriptions: api.InStockSubscriptions;
    inventory_models: api.InventoryModels;
    inventory_return_locations: api.InventoryReturnLocations;
    inventory_stock_locations: api.InventoryStockLocations;
    line_item_options: api.LineItemOptions;
    line_items: api.LineItems;
    manual_gateways: api.ManualGateways;
    manual_tax_calculators: api.ManualTaxCalculators;
    markets: api.Markets;
    merchants: api.Merchants;
    order_amount_promotion_rules: api.OrderAmountPromotionRules;
    order_copies: api.OrderCopies;
    order_subscriptions: api.OrderSubscriptions;
    order_validation_rules: api.OrderValidationRules;
    orders: api.Orders;
    organization: api.Organizations;
    packages: api.Packages;
    parcel_line_items: api.ParcelLineItems;
    parcels: api.Parcels;
    payment_gateways: api.PaymentGateways;
    payment_methods: api.PaymentMethods;
    paypal_gateways: api.PaypalGateways;
    paypal_payments: api.PaypalPayments;
    percentage_discount_promotions: api.PercentageDiscountPromotions;
    price_lists: api.PriceLists;
    prices: api.Prices;
    promotion_rules: api.PromotionRules;
    promotions: api.Promotions;
    refunds: api.Refunds;
    return_line_items: api.ReturnLineItems;
    returns: api.Returns;
    shipments: api.Shipments;
    shipping_categories: api.ShippingCategories;
    shipping_methods: api.ShippingMethods;
    shipping_zones: api.ShippingZones;
    sku_list_items: api.SkuListItems;
    sku_list_promotion_rules: api.SkuListPromotionRules;
    sku_lists: api.SkuLists;
    sku_options: api.SkuOptions;
    skus: api.Skus;
    stock_items: api.StockItems;
    stock_line_items: api.StockLineItems;
    stock_locations: api.StockLocations;
    stock_transfers: api.StockTransfers;
    stripe_gateways: api.StripeGateways;
    stripe_payments: api.StripePayments;
    tax_calculators: api.TaxCalculators;
    tax_categories: api.TaxCategories;
    tax_rules: api.TaxRules;
    taxjar_accounts: api.TaxjarAccounts;
    transactions: api.Transactions;
    voids: api.Voids;
    webhooks: api.Webhooks;
    wire_transfers: api.WireTransfers;
    constructor(config: CommerceLayerInitConfig);
    get currentOrganization(): string;
    private localConfig;
    config(config: CommerceLayerConfig): void;
    resources(): readonly string[];
    isApiError(error: any): error is ApiError;
    addRequestInterceptor(onFulfilled?: RequestInterceptor, onRejected?: ErrorInterceptor): number;
    addResponseInterceptor(onFulfilled?: ResponseInterceptor, onRejected?: ErrorInterceptor): number;
    removeInterceptor(type: InterceptorType, id: number): void;
    addRawResponseReader(): RawResponseReader;
    removeRawResponseReader(reader: number | RawResponseReader): void;
}
declare const CommerceLayer: (config: CommerceLayerInitConfig) => CommerceLayerClient;
export default CommerceLayer;
export type { CommerceLayerClient, CommerceLayerConfig, CommerceLayerInitConfig };
