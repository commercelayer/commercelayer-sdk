"use strict";var __importDefault=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.normalize=exports.denormalize=void 0;const common_1=require("./common"),debug_1=__importDefault(require("./debug")),debug=(0,debug_1.default)(),denormalize=r=>{let t;r.links&&delete r.links;const e=r.data,i=r.included;return Array.isArray(e)?t=e.map(o=>denormalizeResource(o,i)):t=denormalizeResource(e,i),t};exports.denormalize=denormalize;const findIncluded=(r,t=[])=>t.find(e=>r.id===e.id&&r.type===e.type)||r,denormalizeResource=(r,t)=>{debug("denormalize resource: %O, %o",r,t||{});const e=Object.assign({id:r.id,type:r.type},r.attributes);return r.relationships&&Object.keys(r.relationships).forEach(i=>{const o=r.relationships[i].data;o?Array.isArray(o)?e[i]=o.map(s=>denormalizeResource(findIncluded(s,t),t)):e[i]=denormalizeResource(findIncluded(o,t),t):o===null&&(e[i]=null)}),debug("denormalized resource: %O",e),e},normalize=r=>{debug("normalize resource: %O",r);const t={},e={};for(const o in r){if(["type","id"].includes(o))continue;const s=r[o];s&&((0,common_1.isResourceId)(s)||Array.isArray(s)&&(0,common_1.isResourceId)(s[0]))?e[o]={data:s}:t[o]=s}const i={type:r.type,attributes:t,relationships:e};return(0,common_1.isResourceId)(r)&&(i.id=r.id),debug("normalized resource: %O",i),i};exports.normalize=normalize;