
// import * as api from './api'
import { getResources } from './enum'
import { isApiError, type ApiError } from './error'
import type { ErrorInterceptor, InterceptorType, RawResponseReader, RequestInterceptor, ResponseInterceptor, ResponseObj, HeadersObj, InterceptorManager } from './interceptor'
import { ApiResourceAdapter, type ResourcesInitConfig } from './resource'


import Debug from './debug'
const debug = Debug('commercelayer')


// Autogenerated schema version number, do not remove this line
export const OPEN_API_SCHEMA_VERSION = '7.8.5'


// SDK local configuration
type SdkConfig = {
	// abc?: string
}

type CommerceLayerInitConfig = SdkConfig & ResourcesInitConfig
type CommerceLayerConfig = Partial<CommerceLayerInitConfig>



class CommerceLayerClient {

	static get openApiSchemaVersion(): string { return OPEN_API_SCHEMA_VERSION }
	readonly openApiSchemaVersion = OPEN_API_SCHEMA_VERSION

	protected static cl: CommerceLayerClient

	// ##__CL_RESOURCES_DEF_START__##
	// ##__CL_RESOURCES_DEF_TEMPLATE:: ##__TAB__#####__RESOURCE_TYPE__##?: api.##__RESOURCE_CLASS__##
	// ##__CL_RESOURCES_DEF_STOP__##


	static get (config?: CommerceLayerInitConfig): CommerceLayerClient {
		if (config) return (CommerceLayerClient.cl = new CommerceLayerClient(config))
		else
		if (!CommerceLayerClient.cl) throw new Error('CommerceLayer client not initialized')
		return CommerceLayerClient.cl
	}


	protected constructor(config: CommerceLayerInitConfig) {

		debug('new commercelayer instance %O', config)

		ApiResourceAdapter.init(config)

		// ##__CL_RESOURCES_INIT_START__##
		// ##__CL_RESOURCES_INIT_TEMPLATE:: ##__TAB__####__TAB__##this.##__RESOURCE_TYPE__## = new api.##__RESOURCE_CLASS__##(this.#adapter)
		// ##__CL_RESOURCES_INIT_STOP__##

	}

	// ##__CL_RESOURCES_LEAZY_LOADING_START__##
	// ##__CL_RESOURCES_LEAZY_LOADING_TEMPLATE:: ##__TAB__##get ##__RESOURCE_TYPE__##(): api.##__RESOURCE_CLASS__## { return this.###__RESOURCE_TYPE__## || (this.###__RESOURCE_TYPE__## = new api.##__RESOURCE_CLASS__##(this.#adapter)) }
	// ##__CL_RESOURCES_LEAZY_LOADING_STOP__##

	// private get adapter(): ResourceAdapter { return ApiResourceAdapter.get() }
	get currentOrganization(): string { return ApiResourceAdapter.get().client?.currentOrganization }
	get currentAccessToken(): string { return ApiResourceAdapter.get().client?.currentAccessToken }
	private get interceptors(): InterceptorManager { return ApiResourceAdapter.get().client?.interceptors }


	private localConfig(config: Partial<SdkConfig>): void {
		// if (config.abc) this.abc = config.abc
	}


	config(config: CommerceLayerConfig): this {

		debug('config %o', config)

		// CommerceLayer config
		this.localConfig(config)
		// ResourceAdapter config
		ApiResourceAdapter.config(config)

		return this

	}

	
	resources(sort?: boolean): readonly string[] {
		return getResources(sort)
	}

	isApiError(error: any): error is ApiError {
		return isApiError(error)
	}


	addRequestInterceptor(onSuccess?: RequestInterceptor, onFailure?: ErrorInterceptor): number {
		this.interceptors.request = { onSuccess, onFailure }
		return 1
	}

	addResponseInterceptor(onSuccess?: ResponseInterceptor, onFailure?: ErrorInterceptor): number {
		this.interceptors.response = { onSuccess, onFailure }
		return 1
	}

	removeInterceptor(type: InterceptorType, id: number = 1): void {
		this.interceptors[type] = undefined
	}

	removeInterceptors(): void {
		this.removeInterceptor('request')
		this.removeInterceptor('response')
		this.removeRawResponseReader()
	}

	addRawResponseReader(options?: { headers: boolean }): RawResponseReader {

		const reader: RawResponseReader = {
			id: 0,
			rawResponse: undefined,
			headers: undefined,
			ok: true
		}

		async function rawResponseInterceptor(response: ResponseObj): Promise<ResponseObj> {
			reader.rawResponse = await response?.clone().json().catch(() => {})
			reader.ok = response.ok
			if (options?.headers) {
				const ho: HeadersObj = {}
				response.headers.forEach((value, key) => { ho[key] = value })
				reader.headers = ho
			}
			return response
		}
		
		/* const interceptor = */this.interceptors.rawReader = { onSuccess: rawResponseInterceptor, onFailure: rawResponseInterceptor }
		reader.id = 1 // interceptor

		return reader

	}

	removeRawResponseReader(/* reader: number | RawResponseReader */): void {
		/*
		const id = (typeof reader === 'number') ? reader : reader?.id
		if (id && (id >= 0)) this.removeInterceptor('response', id)
		*/
		this.interceptors.rawReader = undefined
	}

}



const CommerceLayer = (config: CommerceLayerInitConfig): CommerceLayerClient => {
	return CommerceLayerClient.get(config)
}


export default CommerceLayer
export { CommerceLayer }

export { CommerceLayerClient }
export type { CommerceLayerConfig, CommerceLayerInitConfig }
